apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kinesis-api-uploads-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /nfs/general/uploads/kinesis-api
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - k8s-worker-0
                - k8s-worker-1
                - k8s-worker-2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kinesis-api-uploads-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kinesis-api-data-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /nfs/general/kinesis-db
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - k8s-worker-0
                - k8s-worker-1
                - k8s-worker-2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kinesis-api-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kinesis-api-web
  labels:
    app: kinesis-api-web
spec:
  selector:
    matchLabels:
      app: kinesis-api-web
  minReadySeconds: 300
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: kinesis-api-web
    spec:
      containers:
        - image: repo.kinesis.games:5050/rust/kinesis-db:latest
          name: kinesis-api-web
          ports:
            - containerPort: 8080
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "0.5"
              memory: 128Mi
            limits:
              cpu: "1.5"
              memory: 512Mi
          volumeMounts:
            - name: secret
              mountPath: '/app/.env'
              subPath: .env
            - name: kinesis-api-uploads-volume
              mountPath: /app/public
            - name: kinesis-api-data-volume
              mountPath: /db
        - image: redis:latest
          name: kinesis-api-redis-db
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "0.1"
              memory: 32Mi
            limits:
              cpu: "0.5"
              memory: 1024Mi
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: secret
          secret:
            secretName: kinesis-api-env-secret
        - name: kinesis-api-uploads-volume
          persistentVolumeClaim:
            claimName: kinesis-api-uploads-pvc
        - name: kinesis-api-data-volume
          persistentVolumeClaim:
            claimName: kinesis-api-data-pvc
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: kinesis-api-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kinesis-api-web
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80
---
apiVersion: v1
kind: Service
metadata:
  name: kinesis-api-svc
  labels:
    app: kinesis-api-web
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 31025
      protocol: TCP
  selector:
    app: kinesis-api-web
